---
## https://github.com/Neo23x0/Loki
## yara 3.2+ needed
## On mac, need python-yara & python-colorama

- name: loki dependencies
  package: name={{ loki_pkg }} state=present
  when: do_install is defined and do_install and ansible_system == 'Linux'
  register: pkg_result
  until: pkg_result is success

- name: redhat | ensuring libpcre usable
  file:
    src: "{{ loki_redhat_pcre }}"
    dest: "/usr/lib64/libpcre.so.3"
    state: link
  when: >
    do_install is defined and do_install and
    ansible_os_family == "RedHat" and
    loki_redhat_pcre is defined and loki_redhat_pcre|string

- name: Check if Loki dir exists
  stat: path={{ bin_path }}/Loki
  register: gitloki
- name: Loki git clone
  git:
    repo: https://github.com/Neo23x0/Loki.git
    dest: "{{ bin_path }}/Loki"
    version: "{{ loki_version | default('v0.30.3') }}"
  when: not gitloki.stat.exists and (do_download is defined and do_download)

- name: signature-base git clone
  git:
    repo: https://github.com/Neo23x0/signature-base.git
    dest: "{{ bin_path }}/signature-base"
    version: "{{ loki_signaturebase_version | default('b3b0e19ee77592168ddcf46bac7f5bbae7b7a390') }}"

- name: add signature-base symlink
  file:
    src: "{{ bin_path }}/signature-base"
    dest: "{{ bin_path }}/Loki/signature-base"
    state: link

- name: ensure right permissions for loki.py
  file: path="{{ bin_path }}/Loki/loki.py" mode=0700

## v2.2.0 bug/centos: https://github.com/ansible/ansible-modules-core/issues/5470, fixed in 2.2.1
- name: installing pip modules in virtualenv
  pip:
    name: "{{ loki_pip_pkg }}"
    virtualenv: "{{ loki_env }}"
    virtualenv_python: "{{ loki_python_bin | defaults('python') }}"
  when: >
    (do_build is defined and do_build) and
    (loki_virtualenv_command is not defined or not loki_virtualenv_command)
  register: pkg_result
  until: pkg_result is success

## Note: on harden-darwin system, might be blocked by Google Santa and trigger RansomWhere validation
- name: installing pip modules in virtualenv - specific virtualenv executable
  pip:
    name: "{{ loki_pip_pkg }}"
    virtualenv: "{{ loki_env }}"
    virtualenv_command: "{{ loki_virtualenv_command }}"
  when: >
    (do_build is defined and do_build) and
    (loki_virtualenv_command is defined and loki_virtualenv_command)
  register: pkg_result
  until: pkg_result is success

- name: ensuring libyara.so available in virtualenv
  file:
    src: "{{ loki_env }}/lib/python2.7/site-packages/{{ loki_env }}/lib/libyara.so"
    dest: "{{ loki_env }}/lib/libyara.so"
    state: link
  when: ansible_distribution_release == 'xenial' or ansible_os_family == 'RedHat'

## eventually ask a confirmation before starting long task
#- pause: prompt="Please confirm before we start loki scan (long task)"

- name: check target dir exists
  file: dest={{ dst_path }} state=directory mode=0700

- name: Set fact loki_output
  set_fact:
    loki_output: "{{ dst_path }}/{{ prefix }}-Loki.log"

- name: check if log output exists
  stat:
    path: "{{ loki_output }}"
  register: res

- name: Loki upgrade
  command: "{{ loki_env }}/bin/python {{ bin_path }}/Loki/loki-upgrader.py"
  args:
    chdir: "{{ bin_path }}/Loki"
  become: yes
  when: not res.stat.exists and loki_capture is defined and loki_capture and loki_upgrade
  register: lokiup

- debug: var=lokiup.stdout_lines
- debug: var=lokiup.stderr

## Note: as it takes a while to run, we give maximum 1h=3600s to run and we check state only every 60sec
## --onlyrelevant: will generate no logs if nothing found
- name: Loki scan
  command: >
    {{ loki_env }}/bin/python {{ bin_path }}/Loki/loki.py {{ loki_args }}
        -p {{ loki_scan_path }} -l {{ loki_output }}
  args:
    chdir: "{{ bin_path }}/Loki"
  become: yes
  when: not res.stat.exists and loki_capture is defined and loki_capture
  async: 3600
  poll: 60
  register: lokiscan
  ignore_errors: true
## https://github.com/ansible/ansible/issues/8644
## http://stackoverflow.com/questions/492483/setting-the-correct-encoding-when-piping-stdout-in-python
  environment:
    PYTHONIOENCODING: 'utf-8'

- debug: var=lokiscan.stdout_lines
- debug: var=lokiscan.stderr
